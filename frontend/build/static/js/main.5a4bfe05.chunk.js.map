{"version":3,"sources":["components/Navbar.js","components/Landing.js","components/UserFunctions.js","components/FormValidator.js","components/Login.js","components/Register.js","components/Profile.js","components/TodoListFunctions.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Landing","e","preventDefault","localStorage","removeItem","this","props","history","push","loginRegLink","className","to","userLink","href","onClick","logOut","bind","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","usertoken","Component","withRouter","register","newUser","axios","post","name","email","password","then","response","console","log","login","user","setItem","data","token","catch","err","updatePassword","updatePasswordRequest","put","new_password","headers","dir","message","FormValidator","validations","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","method","validator","validWhen","isValid","map","Login","handleFormSubmit","event","validate","setState","submitted","res","errors","onChange","target","value","htmlFor","placeholder","Register","required","Profile","passwordMatch","confirmation","onSubmit","confirm_password","get","Authorization","status","getProfile","role","class","data-dismiss","aria-hidden","getList","error","addToList","task","deleteItem","delete","updateItem","taskUpdateRequest","TodoList","getAll","items","taskRequest","editDisabled","errorMessage","onUpdate","isUpdate","onEdit","item_id","item","onDelete","val","createdAt","onCreate","statusCode","date","getDate","getMonth","getFullYear","style","display","index","key","getStatus","formatDate","Date","disabled","defaults","baseURL","App","Navbar","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a4bfe05.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\n\nclass Landing extends Component {\n  \n  logOut(e) {\n    e.preventDefault()\n   localStorage.removeItem('usertoken')\n    this.props.history.push(`/`)\n  }\n\n  render() {\n    const loginRegLink = (\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Login\n          </Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Register\n          </Link>\n        </li>\n\n      </ul>\n    )\n\n    const userLink = (\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <Link to=\"/profile\" className=\"nav-link\">\n            User\n          </Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link to=\"/todo-list\" className=\"nav-link\">\n            Todo List\n          </Link>\n        </li>\n        <li className=\"nav-item\">\n          <a href=\"\" onClick={this.logOut.bind(this)} className=\"nav-link\">\n            Logout\n          </a>\n        </li>\n      </ul>\n    )\n\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark rounded\">\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarsExample10\"\n          aria-controls=\"navbarsExample10\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n\n        <div\n          className=\"collapse navbar-collapse justify-content-md-center\"\n          id=\"navbarsExample10\"\n        >\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                Home\n              </Link>\n            </li>\n          </ul>\n          {localStorage.usertoken ? userLink : loginRegLink}\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default withRouter(Landing)\n","import React, { Component } from 'react'\n\nclass Landing extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"jumbotron mt-5\">\n          <div className=\"col-sm-8 mx-auto\">\n            <h1 className=\"text-center\">WELCOME</h1>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Landing\n","import axios from 'axios'\n\nexport const register = newUser => {\n  return axios\n    .post('users/register', {\n      name: newUser.name,\n      email: newUser.email,\n      password: newUser.password\n    })\n    .then(response => {\n      console.log('Registered')\n    })\n}\n\nexport const login = user => {\n  return axios\n    .post('users/login', {\n      email: user.email,\n      password: user.password\n    })\n    .then(response => {\n      localStorage.setItem('usertoken', response.data.token)\n      return response.data\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n\nexport const getProfile = token => {\n  return axios\n    .get('users/profile', {\n      headers: { Authorization: token }\n    })\n    .then(response => {\n      response.data.status = 'success';\n      return response.data\n    })\n    .catch(err => {\n      console.dir(err)\n      return {'error':err.message,'status':'failed'};\n    })\n}\n\n\n\nexport const updatePassword = updatePasswordRequest => {\n  return axios\n    .put(\n      `/users/password/`,\n      {\n        email:updatePasswordRequest.email,\n        password: updatePasswordRequest.password,\n        new_password: updatePasswordRequest.new_password\n      },\n      {\n        headers: { \n            'Content-Type': 'application/json', \n            'Authorization': updatePasswordRequest.token \n        }\n      }\n    )\n    .then(function(response) {\n        return response.data;\n    }).catch(err=>{\n      console.dir(\"err\",err);\n      return err.message;\n    })\n}","import validator from 'validator';\n\nclass FormValidator {\n  constructor(validations) {\n    // validations is an array of validation rules specific to a form\n    this.validations = validations;\n  }\n\n  validate(state) {\n    // start out assuming valid\n    let validation = this.valid();\n\n    // for each validation rule\n    this.validations.forEach(rule => {\n\n      // if the field hasn't already been marked invalid by an earlier rule\n      if (!validation[rule.field].isInvalid) {\n        // determine the field value, the method to invoke and optional args from \n        // the rule definition\n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method = \n              typeof rule.method === 'string' ?\n              validator[rule.method] : \n              rule.method\n              \n        // call the validation_method with the current field value as the first\n        // argument, any additional arguments, and the whole state as a final\n        // argument.  If the result doesn't match the rule.validWhen property,\n        // then modify the validation object for the field and set the isValid\n        // field to false\n        if(validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = { isInvalid: true, message: rule.message }\n          validation.isValid = false;\n        }\n      }\n    });\n\n    return validation;\n  }\n\n  valid() {\n    const validation = {}\n\n    this.validations.map(rule => (\n      validation[rule.field] = { isInvalid: false, message: '' }\n    ));\n\n    return { isValid: true, ...validation };\n  }\n}\n\nexport default FormValidator;\n","import React, { Component } from 'react'\nimport { login } from './UserFunctions'\nimport FormValidator from './FormValidator'\n\nclass Login extends Component {\n  constructor() {\n    super()\n\n    this.validator = new FormValidator([\n      { \n        field: 'email', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Email is required.' \n      },\n      { \n        field: 'email',\n        method: 'isEmail', \n        validWhen: true, \n        message: 'That is not a valid email.'\n      },\n      { \n        field: 'password', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Password is required.'\n      }\n    ]);\n\n\n    this.state = {\n      email: '',\n      password: '',\n      errors: {},\n      validation: this.validator.valid(),\n    }\n\n    this.onChange = this.onChange.bind(this)\n    this.submitted = false;\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    \n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    this.submitted = true;\n\n    if (validation.isValid) {\n      // handle actual form submission here\n      const user = {\n        email: this.state.email,\n        password: this.state.password\n      }\n\n      login(user).then(res => {\n        if (res) {\n          this.props.history.push(`/profile`)\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6 mt-5 mx-auto\">\n            <form>\n              <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\n              <div className=\"form-group\">\n                <label htmlFor=\"email\">Email address</label>\n                <input\n                  type=\"email\"\n                  className=\"form-control\"\n                  name=\"email\"\n                  placeholder=\"Enter email\"\n                  value={this.state.email}\n                  onChange={this.onChange}\n                />\n                <span className=\"help-block\">{this.state.validation.email.message}</span>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"password\">Password</label>\n                <input\n                  type=\"password\"\n                  className=\"form-control\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  value={this.state.password}\n                  onChange={this.onChange}\n                />\n                <span className=\"help-block\">{this.state.validation.password.message}</span>\n              </div>\n              <button\n                type=\"submit\"\n                onClick={this.handleFormSubmit}\n                className=\"btn btn-lg btn-primary btn-block\"\n              >\n                Sign in\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Login\n","import React, { Component } from 'react'\nimport { register } from './UserFunctions'\nimport FormValidator from './FormValidator';\n\nclass Register extends Component {\n  constructor() {\n    super()\n\n    this.validator = new FormValidator([\n      { \n        field: 'email', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Email is required.' \n      },\n      { \n        field: 'email',\n        method: 'isEmail', \n        validWhen: true, \n        message: 'That is not a valid email.'\n      },\n      { \n        field: 'name', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Name is required.'\n      },\n      { \n        field: 'password', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Password is required.'\n      }\n    ]);\n\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      errors: {},\n      validation: this.validator.valid(),\n    }\n\n    this.onChange = this.onChange.bind(this)\n    this.submitted = false;\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    \n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    this.submitted = true;\n\n    if (validation.isValid) {\n      // handle actual form submission here\n      const newUser = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password\n      }\n      register(newUser).then(res => {\n        this.props.history.push(`/login`)\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6 mt-5 mx-auto\">\n            <form>\n              <h1 className=\"h3 mb-3 font-weight-normal\">Register</h1>\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">First name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"name\"\n                  placeholder=\"Enter your first name\"\n                  required\n                  value={this.state.name}\n                  onChange={this.onChange}\n                />\n                <span className=\"help-block\">{this.state.validation.name.message}</span>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"email\">Email address</label>\n                <input\n                  type=\"email\"\n                  className=\"form-control\"\n                  name=\"email\"\n                  placeholder=\"Enter email\"\n                  required\n                  value={this.state.email}\n                  onChange={this.onChange}\n                />\n                <span className=\"help-block\">{this.state.validation.email.message}</span>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"password\">Password</label>\n                <input\n                  type=\"password\"\n                  className=\"form-control\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  required\n                  value={this.state.password}\n                  onChange={this.onChange}\n                />\n                <span className=\"help-block\">{this.state.validation.password.message}</span>\n              </div>\n              <button\n                type=\"submit\"\n                onClick={this.handleFormSubmit}\n                className=\"btn btn-lg btn-primary btn-block\"\n              >\n                Register!\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Register\n","import React, { Component } from 'react'\nimport { getProfile, updatePassword } from './UserFunctions'\nimport FormValidator from './FormValidator'\n\nclass Profile extends Component {\n  constructor() {\n    super()\n\n    this.validator = new FormValidator([\n      { \n        field: 'password', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Password is required.' \n      },\n      { \n        field: 'new_password', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'New password is required.'\n      },\n      { \n        field: 'confirm_password', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Password confirmation is required.'\n      },\n      { \n        field: 'confirm_password', \n        method: this.passwordMatch,   // notice that we are passing a custom function here\n        validWhen: true, \n        message: 'Password and password confirmation do not match.'\n      }\n    ]);\n\n    this.state = {\n      name: '',\n      email: '',\n      password:'',\n      new_password:'',\n      confirm_password:'',\n      errors: {},\n      message:'',\n      validation: this.validator.valid(),\n    }\n\n    this.onChange = this.onChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  passwordMatch = (confirmation, state) => (state.new_password === confirmation)\n\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n\n  componentDidMount() {\n    const token = localStorage.usertoken\n    if(token){\n      getProfile(token).then(res => {\n        if (res) {\n          if(res.status === 'success'){\n            this.setState({\n              name: res.name,\n              email: res.email\n            })\n          }else{\n            // localStorage.removeItem('usertoken')\n            this.props.history.push(`/login`)\n          }\n        }\n      });\n\n    }else{\n      localStorage.removeItem('usertoken')\n      this.props.history.push(`/login`)\n    }\n  }\n\n  \n  onSubmit = e => {\n    e.preventDefault()\n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    if (validation.isValid) {\n        // Reset Message\n        this.setState({\n          message: ''\n        })\n        const token = localStorage.usertoken;\n        const updatePasswordRequest = {\n            token: token,\n            email:this.state.email,\n            password: this.state.password,\n            new_password: this.state.new_password\n        }\n    \n        updatePassword(updatePasswordRequest).then((res) => {\n            this.setState({\n              message: res.message\n            })\n        }).catch(err=>{\n            this.setState({message:err.message })\n        })\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"jumbotron mt-5\">\n          <div className=\"col-sm-8 mx-auto\">\n            <h1 className=\"text-center\">PROFILE</h1>\n          </div>\n          <table className=\"table col-md-6 mx-auto\">\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>{this.state.name}</td>\n              </tr>\n              <tr>\n                <td>Email</td>\n                <td>{this.state.email}</td>\n              </tr>\n              { this.state.message !== '' ?\n              <tr>\n                <td> <strong>Message: </strong></td>\n                <td>\n                <div className=\"col-md-12\">\n                    <div className=\"alert alert-info alert-dismissible fade show\" role=\"alert\">\n                        {this.state.message}\n                        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                          <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                  </div>\n                </td>\n              </tr>\n              :\n              <tr></tr>\n              }\n              <tr>\n                <td>Update Password</td>\n                <td>\n                <form onSubmit={this.onSubmit}>\n                    <table>\n                      <tbody>\n                        <tr>\n                            <td>\n                            <div className=\"form-group\">\n                              <label htmlFor=\"password\">Password</label>\n                              <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                  <input\n                                    type=\"hidden\"\n                                    className=\"form-control\"\n                                    value={this.state.email}\n                                    name=\"email\"\n                                  />\n                                  <input\n                                    type=\"password\"\n                                    className=\"form-control\"\n                                    value={this.state.password}\n                                    name=\"password\"\n                                    onChange={this.onChange}\n                                  />\n                                  <span className=\"help-block\">{this.state.validation.password.message}</span>\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>\n                          <div className=\"form-group\">\n                              <label htmlFor=\"new_password\">New Password</label>\n                              <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                  <input\n                                    type=\"password\"\n                                    className=\"form-control\"\n                                    value={this.state.new_password}\n                                    name=\"new_password\"\n                                    onChange={this.onChange}\n                                  />\n                                  <span className=\"help-block\">{this.state.validation.new_password.message}</span>\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>\n                          <div className=\"form-group\">\n                              <label htmlFor=\"confirm_password\">Confirm Password</label>\n                              <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                  <input\n                                    type=\"password\"\n                                    className=\"form-control\"\n                                    value={this.state.confirm_password}\n                                    name=\"confirm_password\"\n                                    onChange={this.onChange}\n                                  />\n                                  <span className=\"help-block\">{this.state.validation.confirm_password.message}</span>\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>\n                          <button className=\"btn btn-primary btn-block\">\n                              Update\n                          </button>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </form>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Profile\n","import axios from 'axios'\n\nexport const getList = token => {\n    return axios\n        .get('/api/tasks', {\n        headers: { \n            'Content-Type': 'application/json',\n            'Authorization':token\n        }\n        })\n        .then(res => {\n            res.data.status = 'success'\n            return res.data\n        }).catch(err => {\n            return {\n                error:'Please login again!',\n                status:'failed',\n                message:err.message\n            }\n        })\n}\n\nexport const addToList = task => {\n  return axios\n    .post(\n      '/api/task',\n      {\n        name: task.name,\n        status: task.status\n      },\n      {\n        headers: { \n            'Content-Type': 'application/json',\n            'Authorization':task.token \n        }\n      }\n    )\n    .then(function(response) {\n        return response.data;\n    }).catch(err => {\n        return {\n            error:'Error to add',\n            status:'failed',\n            message:err.message\n        }\n    })\n}\n\nexport const deleteItem = (task, token) => {\n  return axios\n    .delete(`/api/task/${task}`, {\n      headers: { \n            'Content-Type': 'application/json',\n            'Authorization': token \n        }\n    })\n    .then(function(response) {\n        console.log(response)\n        return response;\n    })\n    .catch(function(error) {\n      console.log(error)\n      return error;\n    })\n}\n\nexport const updateItem = taskUpdateRequest => {\n  return axios\n    .put(\n      `/api/task/${taskUpdateRequest.id}`,\n      {\n        name: taskUpdateRequest.name,\n        status: taskUpdateRequest.status\n      },\n      {\n        headers: { \n            'Content-Type': 'application/json', \n            'Authorization': taskUpdateRequest.token \n        }\n      }\n    )\n    .then(function(response) {\n        return response.data;\n    })\n}\n","import React, { Component } from 'react'\nimport { getList, addToList, deleteItem, updateItem } from './TodoListFunctions'\nimport FormValidator from './FormValidator'\n\nclass TodoList extends Component {\n  constructor() {\n    super()\n\n\n    this.validator = new FormValidator([\n        { \n          field: 'task', \n          method: 'isEmpty', \n          validWhen: false, \n          message: 'Task name is required' \n        },\n        { \n          field: 'status',\n          method: 'isEmpty', \n          validWhen: false, \n          message: 'Status is required'\n        }\n      ]);\n\n    this.state = {\n      id: '',\n      task: '',\n      status: 0,\n      createdAt:'',\n      isUpdate : false,\n      errorMessage:'',\n      items: [],\n      validation: this.validator.valid(),\n    }\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onChange = this.onChange.bind(this)\n    this.onCreate = this.onCreate.bind(this)\n  }\n\n  componentDidMount() {\n    const token = localStorage.usertoken;\n    this.getAll(token)\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  onCreate(e) {\n    e.preventDefault()\n    const token = localStorage.usertoken;\n    this.setState({\n      id: '',\n      task: '',\n      status: 0,\n      createdAt:'',\n      isUpdate : false,\n      errorMessage:'',\n      items: [],\n      validation: this.validator.valid(),\n    });\n    this.getAll(token)\n  }\n\n  getStatus(statusCode) {\n    const status = ['Start','In Progress','End'];\n    return status[statusCode];\n  }\n\n\n  formatDate(date) {\n    var monthNames = [\n      \"January\", \"February\", \"March\",\n      \"April\", \"May\", \"June\", \"July\",\n      \"August\", \"September\", \"October\",\n      \"November\", \"December\"\n    ];\n    return date.getDate() + ' ' + monthNames[date.getMonth()] + ', ' + date.getFullYear();\n  }\n  \n\n  getAll = token => {\n    getList(token).then(data => {\n        if(data.status !== 'success'){\n            localStorage.removeItem('usertoken')\n            this.props.history.push(`/login`)\n        }else{\n            this.setState(\n                {\n                    task: '',\n                    items: [...data]\n                },\n                () => {\n                    console.log(this.state.items)\n                }\n            )\n        }\n    })\n  }\n\n  onSubmit = e => {\n    e.preventDefault()\n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    if (validation.isValid) {\n        const token = localStorage.usertoken;\n\n        const taskRequest = {\n            token: token,\n            name: this.state.task,\n            status: this.state.status\n        }\n\n        addToList(taskRequest).then(() => {\n            this.getAll(token)\n        }).catch(err=>{\n            this.setState({ editDisabled: false, errorMessage:err.message })\n        })\n        this.setState({ editDisabled: false })\n    }\n  }\n\n  onUpdate = e => {\n    e.preventDefault()\n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    if (validation.isValid) {\n        const token = localStorage.usertoken;\n        const taskUpdateRequest = {\n            id: this.state.id,\n            token: token,\n            name: this.state.task,\n            status: this.state.status\n        }\n        updateItem(taskUpdateRequest).then(() => {\n        this.getAll(token)\n        }).catch(err=>{\n            this.setState({ editDisabled: false, isUpdate:false, errorMessage:err.message })\n        })\n    }\n    this.setState({ editDisabled: false, isUpdate:false,status: 0 })\n  }\n\n  onEdit = (item_id, item, status, e) => {\n    e.preventDefault()\n    this.setState({\n      id: item_id,\n      task: item,\n      status:status,\n      errorMessage:'',\n      isUpdate:true,\n      validation: this.validator.valid(),\n    })\n  }\n\n  onDelete = (val, e) => {\n    e.preventDefault()\n    const token = localStorage.usertoken;\n    deleteItem(val, token).then((res) => {\n        if(res.data.status === 'failed'){\n            this.setState({ errorMessage:res.data.message })\n        }\n        this.getAll(token);\n    }).catch(err=>{\n        this.setState({ errorMessage:err.data.message })\n    })\n  }\n\n  render() {\n    return (\n    <div className=\"row\"> \n        <div className=\"col-md-12 mt-5\">\n        <div className=\"col-md-12\">\n        { this.state.errorMessage !== '' ?\n            <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n                <strong>Error Message: </strong> {this.state.errorMessage}\n            </div>\n            :\n            <div></div>\n        }\n        </div>\n        <form onSubmit={this.onSubmit}>\n        <div className=\"form-group\">\n            <label htmlFor=\"task\">Task Title</label>\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={this.state.task}\n                  name=\"task\"\n                  onChange={this.onChange}\n                />\n                <span className=\"help-block\">{this.state.validation.task.message}</span>\n              </div>\n            </div>\n        </div>\n        <div className=\"form-group\">\n            <label htmlFor=\"status\">Task Status</label>\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <select className=\"form-control\" name=\"status\" value={this.state.status} onChange={this.onChange}>\n                    <option  value=\"0\">Start</option>\n                    <option value=\"1\">In Progress</option>\n                    <option value=\"2\">End</option>\n                </select>\n                <span className=\"help-block\">{this.state.validation.status.message}</span>\n              </div>\n            </div>\n        </div>\n        <button className=\"btn btn-primary btn-block\" onClick={this.onUpdate.bind(this)} \n             style={this.state.isUpdate ? {} : { display: 'none' }} \n        >\n            Update\n        </button>\n        <button type=\"submit\" onClick={this.onSubmit.bind(this)} className=\"btn btn-success btn-block\"\n            style={this.state.isUpdate ? {display: 'none' } : {  }}\n        >\n            Submit\n        </button>\n        <button onClick={this.onCreate.bind(this)} className=\"btn btn-info btn-block\"\n            style={this.state.isUpdate ? {} : { display: 'none' }} \n        >\n            Create New\n        </button>\n        </form>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Status</th>\n              <th>Created Date</th>\n              <th className=\"text-right\">Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.items.map((item, index) => (\n              <tr key={index}>\n              <td className=\"text-left\">{item.name}</td>\n                <td className=\"text-left\">{this.getStatus(item.status)}</td>\n                <td className=\"text-left\">{this.formatDate(new Date(item.createdAt))}</td>\n                <td className=\"text-right\">\n                  <button\n                    className=\"btn btn-info mr-1\"\n                    disabled={this.state.editDisabled}\n                    onClick={this.onEdit.bind(this, item.id, item.name, item.status)}\n                  >\n                    Edit\n                  </button>\n                  <button\n                    href=\"\"\n                    className=\"btn btn-danger\"\n                    onClick={this.onDelete.bind(this, item.id)}\n                    style={this.state.isUpdate ? {display: 'none' } : {  }}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default TodoList","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport axios from 'axios'\nimport Navbar from './components/Navbar'\nimport Landing from './components/Landing'\nimport Login from './components/Login'\nimport Register from './components/Register'\nimport Profile from './components/Profile'\nimport TodoList from './components/TodoList'\n\naxios.defaults.baseURL = \"http://10.0.0.118/backend\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar /> \n          <Route exact path=\"/\" component={Landing} />\n          <div className=\"container\">\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route exact path=\"/todo-list\" component={TodoList} />\n          </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}